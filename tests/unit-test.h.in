/*
 * Copyright © 2008-2013 Stéphane Raimbault <stephane.raimbault@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _UNIT_TEST_H_
#define _UNIT_TEST_H_

/* Constants defined by configure.ac */
#define HAVE_INTTYPES_H @HAVE_INTTYPES_H@
#define HAVE_STDINT_H @HAVE_STDINT_H@

#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
#ifdef HAVE_STDINT_H
# ifndef _MSC_VER
# include <stdint.h>
# else
# include "stdint.h"
# endif
#endif

#include <modbus.h>

#define SERVER_ID         17
#define INVALID_SERVER_ID 18

extern const uint16_t UT_BITS_ADDRESS;
extern const uint16_t UT_BITS_NB;
extern const uint8_t UT_BITS_TAB[5];

extern const uint16_t UT_INPUT_BITS_ADDRESS;
extern const uint16_t UT_INPUT_BITS_NB;
extern const uint8_t UT_INPUT_BITS_TAB[3];

extern const uint16_t UT_REGISTERS_ADDRESS;
/* Raise a manual exception when this address is used for the first byte */
extern const uint16_t UT_REGISTERS_ADDRESS_SPECIAL;
/* The response of the server will contains an invalid TID or slave */
extern const uint16_t UT_REGISTERS_ADDRESS_INVALID_TID_OR_SLAVE;

extern const uint16_t UT_REGISTERS_NB;
extern const uint16_t UT_REGISTERS_TAB[3];
/* If the following value is used, a bad response is sent.
   It's better to test with a lower value than
   UT_REGISTERS_NB_POINTS to try to raise a segfault. */
extern const uint16_t UT_REGISTERS_NB_SPECIAL;

extern const uint16_t UT_INPUT_REGISTERS_ADDRESS;
extern const uint16_t UT_INPUT_REGISTERS_NB;
extern const uint16_t UT_INPUT_REGISTERS_TAB[1];

extern const float UT_REAL;
extern const uint32_t UT_IREAL;
extern const uint32_t UT_IREAL_DCBA;

enum {
    TCP,
    TCP_PI,
    RTU
};

typedef struct {
    int                 socket;
    modbus_t*           ctx;
    modbus_mapping_t*   mb_mapping;
    int                 use_backend;
} unit_test_server_t;


int unit_test_server_listen(unit_test_server_t*);
int unit_test_server_run(unit_test_server_t*);
int unit_test_client_start(int backend);


#endif /* _UNIT_TEST_H_ */
